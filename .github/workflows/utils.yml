name: utility

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:

  test_valgrind:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install dependencies
        id: install_dependencies
        run : sudo apt-get install -y lcov cmake gcc g++ libclang-dev valgrind
      
      - name: Run tests
        run: |
          mkdir build
          cd build
          cmake ../ -DBUILD_PLUGIN_NOOP=ON -DENABLE_TESTS=ON -DBUILD_EXAMPLES=ON -DCMAKE_CXX_COMPILER=g++-12 
          make && make test
      
      - name: Run valgrind tests (core)
        run: |
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes  ./build/test/test_id_pool
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes  ./build/test/test_log
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes  ./build/test/test_misc_mock
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes  ./build/test/test_misc
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes  ./build/test/test_plugin
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes  ./build/test/test_resource
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes  ./build/test/test_session
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes  ./build/test/test_vaccel
      
      # - name : Run valgrind tests (ops)
      #   run : |
      #     cd build/test/  
      #     env VACCEL_BACKENDS=../plugins/noop/libvaccel-noop.so valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_blas
      #     env VACCEL_BACKENDS=../plugins/noop/libvaccel-noop.so valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_exec
      #     env VACCEL_BACKENDS=../plugins/noop/libvaccel-noop.so valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_image
      #     env VACCEL_BACKENDS=../plugins/noop/libvaccel-noop.so valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_image_generic  
      #     env VACCEL_BACKENDS=../plugins/noop/libvaccel-noop.so valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_image   
      #     env VACCEL_BACKENDS=../plugins/noop/libvaccel-noop.so valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_minmax     
      #     env VACCEL_BACKENDS=../plugins/noop/libvaccel-noop.so valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_noop        
      #     env VACCEL_BACKENDS=../plugins/noop/libvaccel-noop.so valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_tf_interference        
      #     env VACCEL_BACKENDS=../plugins/noop/libvaccel-noop.so valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_tf_model
      #     env VACCEL_BACKENDS=../plugins/noop/libvaccel-noop.so valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_tf_saved_model 
   
  spell_check:
    needs: [test_valgrind]
    name: spell check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install codespell
      run: pip3 install codespell
    
    - name: Run spell check
      continue-on-error: true
      run: | 
        codespell ./src
        codespell ./test
    
  cppcheck:
    needs: test_valgrind
    name: cppcheck
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
    
    - name: Install cppcheck
      run: sudo apt install cppcheck
    
    - name: Run cppcheck in src
      run: cppcheck --enable=style src
    
    - name: Run cppcheck in examples
      run : cppcheck --enable=style examples
    
    - name: Run cppcheck in test
      run : cppcheck --enable=style test

    - name : Run cppcheck in plugins
      run : cppcheck --enable=style plugins

  linter:
    needs: test_valgrind
    name: linter
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read
      # To report GitHub Actions status checks
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: linter
        uses: super-linter/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          # To report GitHub Actions status checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISABLE_ERRORS: true 
          VALIDATE_CLANG_FORMAT: true
          FILTER_REGEX_EXCLUDE: .*(test|examples)/.*

  valgrind_examples:
    needs: test_valgrind
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

    # TODO:

  checkpatch:
    needs: [spell_check]
    name: checkpatch review
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
    - name: 'Calculate PR commits + 1'
      run: echo "PR_FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))" >> $GITHUB_ENV
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: ${{ env.PR_FETCH_DEPTH }}
    - name: Run checkpatch review
      uses: webispy/checkpatch-action@v9
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

